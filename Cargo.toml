[package]
name = "libgc_internal"
version = "0.1.0"
authors = ["Jacob Hughes <jh@jakehughes.uk>"]
edition = "2018"
license = "Apache-2.0 OR MIT"

[lib]
bench = false
doc = false

[features]
# Enable this feature to turn on additional GC optimizations that are only
# possible with the rustgc fork of the compiler.
rustgc = ["core", "compiler_builtins", "rustgc_internal"]

# The rustgc feature pulls in the "core" crate. This crate is a necessary hack
# so that libgc_internal can be included in rustc-std when rustgc depends on it.
#
# Unfortunately, the "core" crate prevents libgc_internal from being compiled in
# any other context - even cfg(test). Thus, in order to test the code for the
# "rustgc" feature, we have to de-couple conditional compilation from the
# dependencies that are added by the feature gate. As of cargo 1.50, it's not
# possible to exclude dependencies based on cfg(test). A hack to get around this
# is to use only rustgc_internal when conditionally compiling the relevant
# sources, and including it as part of the rustgc feature. This way, `--features
# rustgc_internal` can be used to test rustgc features.
rustgc_internal = []

# Enable various GC based statistics. Stats are disabled by default as they have
# a run-time cost and are expected to only be used for profiling purposes.
gc_stats = []


[dependencies]
core = { version = "1.0.0", optional = true, package = 'rustc-std-workspace-core' }
compiler_builtins = { version = "0.1.10", optional = true, features = ['rustc-dep-of-std'] }

